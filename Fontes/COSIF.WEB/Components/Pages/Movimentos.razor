@page "/movimentos"
@using System.Net.Http.Json
@using COSIF.Domain.Entities
@using System.Globalization
@using System.Linq
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Navigation
@inject HttpClient Http

<h3 class="mb-4">Movimentos Manuais</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (IsPageLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Carregando...</span></div>
        <div class="mt-2 text-muted">Carregando dados iniciais...</div>
    </div>
}
else
{
    <EditForm EditContext="EditContext" id="movimentosForm">
        <div class="container">

            <div class="card mb-4">
                <div class="card-body">
                    <div class="row gy-3">

                        <div class="col-auto d-flex align-items-center">
                            <label class="col-form-label me-2">Mês (MM)</label>
                        </div>
                        <div class="col-2">
                            <InputNumber id="DatMes" class="form-control"
                                         @bind-Value="Form.DatMes"
                                         maxlength="2"
                                         inputmode="numeric"
                                         name="DatMes"
                                         disabled="@(!IsFormEnabled)" />
                        </div>

                        <div class="col-auto d-flex align-items-center">
                            <label class="col-form-label ms-3 me-2">Ano (YYYY)</label>
                        </div>
                        <div class="col-2">
                            <InputNumber id="DatAno" class="form-control"
                                         @bind-Value="Form.DatAno"
                                         maxlength="4"
                                         inputmode="numeric"
                                         name="DatAno"
                                         disabled="@(!IsFormEnabled)" />
                        </div>

                        <div class="w-100"></div>

                        <div class="col-md-3">
                            <label class="form-label">Produto</label>
                            <InputSelect id="CodProduto" class="form-select" @bind-Value="Form.CodProduto" disabled="@(!IsFormEnabled || IsLoadingProdutos)" name="CodProduto">
                                <option value="">@(IsLoadingProdutos ? "Carregando..." : "Selecione um produto")</option>
                                @foreach (var p in Produtos)
                                {
                                    <option value="@p.CodProduto">@p.DesProduto</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">COSIF</label>
                            <InputSelect id="CodCosif" class="form-select" @bind-Value="Form.CodCosif" disabled="@(!IsFormEnabled || !IsCosifEnabled)" name="CodCosif">
                                <option value="">Selecione um COSIF</option>
                                @foreach (var c in Cosifs)
                                {
                                    <option value="@c.CodCosif">@c.CodCosif</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="w-100"></div>

                        <div class="col-md-3">
                            <label class="form-label">Valor</label>
                            <input id="ValValor" class="form-control"
                                   value="@Form.ValValor"
                                   maxlength="30"
                                   inputmode="decimal"
                                   name="ValValor"
                                   disabled="@(!IsFormEnabled)"
                                   @oninput="OnValueInput"
                                   @onblur="OnValueBlur" />
                        </div>

                        <div class="w-100"></div>

                        <div class="col-12">
                            <label class="form-label">Descrição</label>
                            <InputTextArea id="DesDescricao" class="form-control" @bind-Value="Form.DesDescricao" rows="6" maxlength="50" name="DesDescricao" disabled="@(!IsFormEnabled)"></InputTextArea>
                        </div>

                        <div class="col-12 d-flex justify-content-center mt-3">
                            <button id="btnLimpar" type="button" class="btn btn-secondary me-2" @onclick="Clear">Limpar</button>
                            <a id="btnNovo" class="btn btn-primary me-2" @onclick="NewAsync">Novo</a>

                            <button id="btnIncluir" type="button" class="btn btn-success" @onclick="TriggerClientValidation">Incluir</button>
                        </div>
                    </div>
                </div>
            </div>


            <div class="card">
                <div class="card-header">Lista</div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th>Mês</th>
                                    <th>Ano</th>
                                    <th>Cód Produto</th>
                                    <th>Descrição Produto</th>
                                    <th>Nr Lançamento</th>
                                    <th>Descrição</th>
                                    <th class="text-end">Valor</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (IsLoadingGrid)
                                {
                                    <tr><td colspan="7" class="text-center"><em>Carregando movimentos...</em></td></tr>
                                }
                                else if (lstMovimentos?.Any() == true)
                                {
                                    @foreach (var m in lstMovimentos)
                                    {
                                        <tr>
                                            <td>@(m.DatMes.ToString("D2"))</td>
                                            <td>@m.DatAno</td>
                                            <td>@m.CodProduto</td>
                                            <td>@m.DesProduto</td>
                                            <td>@m.NumLancamento</td>
                                            <td>@m.DesDescricao</td>
                                            <td class="text-end">@m.ValValor.ToString("C")</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr><td colspan="7" class="text-center text-muted">Nenhum movimento encontrado.</td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </EditForm>
}
@code {

    class FormModel
    {
        public int? DatMes { get; set; }
        public int? DatAno { get; set; }
        public string? CodProduto { get; set; }
        public string? CodCosif { get; set; }
        public string? ValValor { get; set; }
        public string? DesDescricao { get; set; }
    }

    FormModel Form = new();
    EditContext EditContext = null!;

    List<Produto> Produtos = new();
    List<ProdutoCosif> Cosifs = new();
    List<MovimentoManual> lstMovimentos = new();

    bool IsPageLoading = true;
    bool IsLoadingProdutos = false;

    bool IsLoadingCosif = false;
    bool IsLoadingGrid = false;
    string ErrorMessage = string.Empty;

    bool IsFormEnabled = false;
    bool IsCosifEnabled = false;
    bool CanInclude = false;

    HttpClient CreateClient() => Http;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Form);
        EditContext.OnFieldChanged += HandleFieldChanged;

        try
        {
            await LoadProdutos();
            await LoadGrid();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao inicializar: {ex.Message}";
        }
        finally
        {
            IsPageLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task OnValueInput(ChangeEventArgs e)
    {
        var raw = (e.Value?.ToString() ?? "");
        var filtered = new string(raw.Where(c => char.IsDigit(c) || c == '.' || c == ',').ToArray());
        filtered = filtered.Replace(',', '.');

        var firstDot = filtered.IndexOf('.');
        if (firstDot >= 0)
        {
            var before = filtered.Substring(0, firstDot);
            var after = new string(filtered.Substring(firstDot + 1).Where(char.IsDigit).ToArray());
            if (after.Length > 2) after = after.Substring(0, 2);
            filtered = before + "." + after;
        }
        Form.ValValor = filtered;
        EditContext?.NotifyFieldChanged(new FieldIdentifier(Form, nameof(Form.ValValor)));
        UpdateIncludeState();
        await InvokeAsync(StateHasChanged);
    }

    void OnValueBlur(FocusEventArgs _)
    {
        var s = Form.ValValor ?? "";
        if (string.IsNullOrWhiteSpace(s)) return;
        if (decimal.TryParse(s, NumberStyles.Number, CultureInfo.InvariantCulture, out var val))
        {
            Form.ValValor = val.ToString("N2", CultureInfo.CurrentCulture);
            EditContext?.NotifyFieldChanged(new FieldIdentifier(Form, nameof(Form.ValValor)));
        }
        UpdateIncludeState();
    }


    async void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(Form.CodProduto))
        {
            IsCosifEnabled = !string.IsNullOrEmpty(Form.CodProduto);
            Form.CodCosif = string.Empty;
            EditContext?.NotifyFieldChanged(new FieldIdentifier(Form, nameof(Form.CodCosif)));

            if (IsCosifEnabled)
            {
                await LoadCosifsForProduct();
            }
            else
            {
                Cosifs = new List<ProdutoCosif>();
                await InvokeAsync(StateHasChanged);
            }
        }

        UpdateIncludeState();
    }

    private void UpdateIncludeState()
    {
        var monthOk = Form.DatMes.HasValue && Form.DatMes.Value >= 1 && Form.DatMes.Value <= 12;
        var yearOk = Form.DatAno.HasValue && Form.DatAno.Value >= 1900 && Form.DatAno.Value <= 2099;
        var prodOk = !string.IsNullOrWhiteSpace(Form.CodProduto);
        var cosifOk = !string.IsNullOrWhiteSpace(Form.CodCosif);
        var valOk = decimal.TryParse((Form.ValValor ?? "").Replace(',', '.'), System.Globalization.NumberStyles.Number, System.Globalization.CultureInfo.InvariantCulture, out var v) && v > 0;
        var descOk = !string.IsNullOrWhiteSpace(Form.DesDescricao) && (Form.DesDescricao?.Length ?? 0) <= 50;

        CanInclude = IsFormEnabled && monthOk && yearOk && prodOk && cosifOk && valOk && descOk;
        _ = InvokeAsync(StateHasChanged);
    }

    private async Task LoadProdutos()
    {
        if (IsLoadingProdutos) return;
        IsLoadingProdutos = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var client = CreateClient();
            Produtos = await client.GetFromJsonAsync<List<Produto>>("https://localhost:63265/api/Produto") ?? new List<Produto>();
        }
        catch (Exception ex)
        {
            Produtos = new List<Produto>();
            ErrorMessage = $"Erro ao carregar produtos: {ex.Message}";
        }
        finally
        {
            IsLoadingProdutos = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadCosifsForProduct()
    {
        if (string.IsNullOrEmpty(Form.CodProduto))
        {
            Cosifs = new List<ProdutoCosif>();
            await InvokeAsync(StateHasChanged);
            return;
        }

        IsLoadingCosif = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var client = CreateClient();
            var url = $"https://localhost:63265/api/ProdutoCosif/getCosif?codProduto={Uri.EscapeDataString(Form.CodProduto)}";
            Cosifs = await client.GetFromJsonAsync<List<ProdutoCosif>>(url) ?? new List<ProdutoCosif>();
        }
        catch (Exception ex)
        {
            Cosifs = new List<ProdutoCosif>();
            ErrorMessage = $"Erro ao carregar COSIFs: {ex.Message}";
        }
        finally
        {
            IsLoadingCosif = false;
            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task LoadGrid()
    {
        if (IsLoadingGrid) return;
        IsLoadingGrid = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var client = CreateClient();
            lstMovimentos = await client.GetFromJsonAsync<List<MovimentoManual>>("https://localhost:63265/api/Movimento") ?? new List<MovimentoManual>();
        }
        catch (Exception ex)
        {
            lstMovimentos = new List<MovimentoManual>();
            ErrorMessage = $"Erro ao carregar movimentos: {ex.Message}";
        }
        finally
        {
            IsLoadingGrid = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void Clear()
    {
        Form = new FormModel();
        EditContext = new EditContext(Form);
        EditContext.OnFieldChanged += HandleFieldChanged;

        IsFormEnabled = false;
        IsCosifEnabled = false;
        CanInclude = false;
        Cosifs.Clear();

        ErrorMessage = string.Empty;
        _ = InvokeAsync(StateHasChanged);
    }

    private async Task NewAsync()
    {
        Clear();
        await LoadProdutos();
        await LoadGrid();

        IsFormEnabled = true;
        UpdateIncludeState();
    }


    private async Task TriggerClientValidation()
    {
        var isValid = EditContext.Validate();
        UpdateIncludeState();

        if (isValid)
        {
            if (!Form.DatMes.HasValue || Form.DatMes.Value < 1 || Form.DatMes.Value > 12)
            {
                ErrorMessage = "Mês inválido (use MM)";
                return;
            }

            if (!Form.DatAno.HasValue || Form.DatAno.Value < 1900 || Form.DatAno.Value > 2099)
            {
                ErrorMessage = "Ano inválido (use YYYY)";
                return;
            }

            if (!decimal.TryParse((Form.ValValor ?? "").Replace(',', '.'), System.Globalization.NumberStyles.Number, System.Globalization.CultureInfo.InvariantCulture, out var val))
            {
                ErrorMessage = "Valor inválido";
                return;
            }

            if ((Form.ValValor ?? "").Replace(",", ".").Length > 18)
            {
                ErrorMessage = "Valor excede limite permitido";
                return;
            }

            await Incluir();
        }
    }

    public async Task SubmitAfterValidation()
    {
        await Incluir();
    }

    private async Task Incluir()
    {
        try
        {
            var month = Form.DatMes ?? 0;
            var year = Form.DatAno ?? 0;
            if (month < 1 || month > 12)
            {
                ErrorMessage = "Mês inválido (use MM)";
                return;
            }

            if (year < 1900 || year > 2099)
            {
                ErrorMessage = "Ano inválido (use YYYY)";
                return;
            }

            if (!decimal.TryParse((Form.ValValor ?? "").Replace(',', '.'), System.Globalization.NumberStyles.Number, System.Globalization.CultureInfo.InvariantCulture, out var val))
            {
                ErrorMessage = "Valor inválido";
                return;
            }

            if ((Form.ValValor ?? "").Replace(",", ".").Length > 18)
            {
                ErrorMessage = "Valor excede limite permitido";
                return;
            }

            var dto = new MovimentoManual
            {
                DatMes = (byte)month,
                DatAno = (short)year,
                CodProduto = Form.CodProduto ?? string.Empty,
                CodCosif = Form.CodCosif ?? string.Empty,
                ValValor = val,
                DesDescricao = (Form.DesDescricao ?? string.Empty).Length > 50 ? (Form.DesDescricao ?? string.Empty).Substring(0, 50) : (Form.DesDescricao ?? string.Empty),
                CodUsuario = "ellen",
                DatMovimento = DateTime.UtcNow
            };

            var client = CreateClient();
            var response = await client.PostAsJsonAsync("https://localhost:63265/api/Movimento", dto);
            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Falha ao incluir: {response.StatusCode} - {msg}";
                return;
            }

            await LoadGrid();
            Clear();

            IsFormEnabled = false;
            UpdateIncludeState();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao incluir movimento: {ex.Message}";
        }
    }

    public void Dispose()
    {
        if (EditContext != null)
        {
            EditContext.OnFieldChanged -= HandleFieldChanged;
        }
    }
}