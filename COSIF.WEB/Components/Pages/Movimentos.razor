@page "/movimentos"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using COSIF.Domain.Entities
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Navigation
@inject HttpClient Http

<h3 class="mb-4">Movimentos Manuais</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
else if (IsPageLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status"><span class="visually-hidden">Carregando...</span></div>
        <div class="mt-2 text-muted">Carregando dados iniciais...</div>
    </div>
}
else
{
    <EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="container">

            <div class="card mb-4">
                <div class="card-body">
                    <div class="row gy-3">

                        <div class="col-auto d-flex align-items-center">
                            <label class="col-form-label me-2">Mês (MM)</label>
                        </div>
                        <div class="col-2">
                            <InputText class="form-control" @bind-Value="Form.DatMes" />
                            <ValidationMessage For="@(() => Form.DatMes)" />
                        </div>

                        <div class="col-auto d-flex align-items-center">
                            <label class="col-form-label ms-3 me-2">Ano (YYYY)</label>
                        </div>
                        <div class="col-2">
                            <InputText class="form-control" @bind-Value="Form.DatAno" />
                            <ValidationMessage For="@(() => Form.DatAno)" />
                        </div>

                        <div class="w-100"></div>

                        <div class="col-md-3">
                            <label class="form-label">Produto</label>
                            <InputSelect class="form-select" @bind-Value="Form.CodProduto" disabled="@(IsLoadingProdutos)">
                                <option value="">@(IsLoadingProdutos ? "Carregando..." : "Selecione um produto")</option>
                                @foreach (var p in Produtos)
                                {
                                    <option value="@p.CodProduto">@p.DesProduto</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => Form.CodProduto)" />
                        </div>

                        <div class="col-md-3">
                            <label class="form-label">COSIF</label>
                            <InputSelect class="form-select" @bind-Value="Form.CodCosif" disabled="@(IsLoadingCosif || string.IsNullOrEmpty(Form.CodProduto))">
                                <option value="">@(IsLoadingCosif ? "Carregando..." : string.IsNullOrEmpty(Form.CodProduto) ? "Selecione um produto" : "Selecione um COSIF")</option>
                                @foreach (var c in Cosifs)
                                {
                                    <option value="@c.CodCosif">@c.CodCosif - @c.CodProduto</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => Form.CodCosif)" />
                        </div>


                        <div class="w-100"></div>

                        <div class="col-md-3">
                            <label class="form-label">Valor</label>
                            <InputNumber class="form-control" @bind-Value="Form.ValValor" step="0.01" />
                            <ValidationMessage For="@(() => Form.ValValor)" />
                        </div>

                        <div class="w-100"></div>

                        <div class="col-12">
                            <label class="form-label">Descrição</label>
                            <InputTextArea class="form-control" @bind-Value="Form.DesDescricao" rows="6" maxlength="200" />
                            <ValidationMessage For="@(() => Form.DesDescricao)" />
                        </div>

                        <div class="col-12 d-flex justify-content-center mt-3">
                            <button type="button" class="btn btn-secondary me-2" @onclick="Clear">Limpar</button>
                            <button type="button" class="btn btn-primary me-2" @onclick="NewAsync">Novo</button>
                            <button type="submit" class="btn btn-success" disabled="@(IsSubmitDisabled())">Incluir</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    Lista
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th>Mês</th>
                                    <th>Ano</th>
                                    <th>Cód Produto</th>
                                    <th>Descrição Produto</th>
                                    <th>Nr Lançamento</th>
                                    <th>Descrição</th>
                                    <th class="text-end">Valor</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (IsLoadingGrid)
                                {
                                    <tr><td colspan="7" class="text-center"><em>Carregando movimentos...</em></td></tr>
                                }
                                else if (lstMovimentos?.Any() == true)
                                {
                                    @foreach (var m in lstMovimentos)
                                    {
                                        <tr>
                                            <td>@(m.DatMes.ToString("D2"))</td>
                                            <td>@m.DatAno</td>
                                            <td>@m.CodProduto</td>
                                            <td>@m.DesProduto</td>
                                            <td>@m.NumLancamento</td>
                                            <td>@m.DesDescricao</td>
                                            <td class="text-end">@m.ValValor.ToString("C")</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr><td colspan="7" class="text-center text-muted">Nenhum movimento encontrado.</td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    class FormModel
    {
        [Required(ErrorMessage = "Mês obrigatório")]
        [RegularExpression("^(0[1-9]|1[0-2])$", ErrorMessage = "Mês deve estar no formato MM (01-12)")]
        public string? DatMes { get; set; }

        [Required(ErrorMessage = "Ano obrigatório")]
        [RegularExpression("^(19|20)\\d{2}$", ErrorMessage = "Ano deve estar no formato YYYY (1900-2099)")]
        public string? DatAno { get; set; }

        [Required]
        [StringLength(4, MinimumLength = 4, ErrorMessage = "Código do produto com 4 caracteres")]
        public string? CodProduto { get; set; }

        [Required]
        [StringLength(11, ErrorMessage = "COSIF deve ter até 11 caracteres")]
        public string? CodCosif { get; set; }

        [Range(typeof(decimal), "0.01", "79228162514264337593543950335", ErrorMessage = "Valor inválido")]
        public decimal ValValor { get; set; }

        [Required, StringLength(200)]
        public string? DesDescricao { get; set; }
    }

    FormModel Form = new();
    EditContext EditContext = null!;

    List<Produto> Produtos = new();
    List<ProdutoCosif> Cosifs = new();
    List<MovimentoManual> lstMovimentos = new();

    bool IsPageLoading = true;
    bool IsLoadingProdutos = false;
    bool IsLoadingCosif = false;
    bool IsLoadingGrid = false;
    string ErrorMessage = string.Empty;

    HttpClient CreateClient() => Http;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Form);
        EditContext.OnFieldChanged += FieldChangedHandler;

        try
        {
            await LoadProdutos();
            await LoadGrid();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao inicializar: {ex.Message}";
        }
        finally
        {
            IsPageLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void FieldChangedHandler(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(Form.CodProduto))
        {
            Form.CodCosif = string.Empty;
            _ = InvokeAsync(LoadCosifsForProduct);
        }
    }

    private async Task LoadProdutos()
    {
        if (IsLoadingProdutos) return;
        IsLoadingProdutos = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var client = CreateClient();
            Produtos = await client.GetFromJsonAsync<List<Produto>>("https://localhost:63265/api/Produto") ?? new List<Produto>();
        }
        catch (Exception ex)
        {
            Produtos = new List<Produto>();
            ErrorMessage = $"Erro ao carregar produtos: {ex.Message}";
        }
        finally
        {
            IsLoadingProdutos = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadCosifsForProduct()
    {
        if (string.IsNullOrEmpty(Form.CodProduto))
        {
            Cosifs = new List<ProdutoCosif>();
            await InvokeAsync(StateHasChanged);
            return;
        }

        IsLoadingCosif = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var client = CreateClient();
            var url = $"https://localhost:63265/api/produtocosif?produto={Uri.EscapeDataString(Form.CodProduto)}";
            Cosifs = await client.GetFromJsonAsync<List<ProdutoCosif>>(url) ?? new List<ProdutoCosif>();
        }
        catch (Exception ex)
        {
            Cosifs = new List<ProdutoCosif>();
            ErrorMessage = $"Erro ao carregar COSIFs: {ex.Message}";
        }
        finally
        {
            IsLoadingCosif = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadGrid()
    {
        if (IsLoadingGrid) return;
        IsLoadingGrid = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var client = CreateClient();
            lstMovimentos = await client.GetFromJsonAsync<List<MovimentoManual>>("https://localhost:63265/api/Movimento") ?? new List<MovimentoManual>();
        }
        catch (Exception ex)
        {
            lstMovimentos = new List<MovimentoManual>();
            ErrorMessage = $"Erro ao carregar movimentos: {ex.Message}";
        }
        finally
        {
            IsLoadingGrid = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void Clear()
    {
        EditContext.OnFieldChanged -= FieldChangedHandler;
        Form = new FormModel();
        EditContext = new EditContext(Form);
        EditContext.OnFieldChanged += FieldChangedHandler;

        Cosifs = new List<ProdutoCosif>();
        ErrorMessage = string.Empty;
        _ = InvokeAsync(StateHasChanged);
    }

    private async Task NewAsync()
    {
        Clear();
        await LoadProdutos();
        await LoadGrid();
    }

    private async Task HandleValidSubmit()
    {
        await Incluir();
    }

    private async Task Incluir()
    {
        try
        {
            if (!EditContext.Validate())
            {
                return;
            }

            if (!int.TryParse(Form.DatMes, out var month) || month < 1 || month > 12)
            {
                ErrorMessage = "Mês inválido (use MM)";
                return;
            }

            if (!int.TryParse(Form.DatAno, out var year) || year < 1900 || year > 2099)
            {
                ErrorMessage = "Ano inválido (use YYYY)";
                return;
            }

            var dto = new MovimentoManual
            {
                DatMes = (byte)month,
                DatAno = (short)year,
                CodProduto = Form.CodProduto ?? string.Empty,
                CodCosif = Form.CodCosif ?? string.Empty,
                ValValor = Form.ValValor,
                DesDescricao = Form.DesDescricao ?? string.Empty,
                CodUsuario = "ellen",
                DatMovimento = DateTime.UtcNow
            };

            var client = CreateClient();
            var response = await client.PostAsJsonAsync("https://localhost:63265/api/Movimento", dto);
            if (!response.IsSuccessStatusCode)
            {
                var msg = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Falha ao incluir: {response.StatusCode} - {msg}";
                return;
            }

            await LoadGrid();
            Clear();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao incluir movimento: {ex.Message}";
        }
    }

    private bool IsSubmitDisabled()
    {
        if (Form == null) return true;
        return string.IsNullOrWhiteSpace(Form.DatMes)
            || string.IsNullOrWhiteSpace(Form.DatAno)
            || string.IsNullOrWhiteSpace(Form.CodProduto)
            || string.IsNullOrWhiteSpace(Form.CodCosif)
            || Form.ValValor <= 0
            || string.IsNullOrWhiteSpace(Form.DesDescricao);
    }

    public void Dispose()
    {
        if (EditContext != null)
            EditContext.OnFieldChanged -= FieldChangedHandler;
    }
}